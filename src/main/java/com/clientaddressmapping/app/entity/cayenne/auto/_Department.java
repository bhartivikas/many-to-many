package com.clientaddressmapping.app.entity.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import com.clientaddressmapping.app.entity.cayenne.Employee;

/**
 * Class _Department was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Department extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String DEP_CODE_PK_COLUMN = "dep_code";

    public static final StringProperty<String> DEP_NAME = PropertyFactory.createString("depName", String.class);
    public static final ListProperty<Employee> DEPARTMENTS = PropertyFactory.createList("departments", Employee.class);

    protected String depName;

    protected Object departments;

    public void setDepName(String depName) {
        beforePropertyWrite("depName", this.depName, depName);
        this.depName = depName;
    }

    public String getDepName() {
        beforePropertyRead("depName");
        return this.depName;
    }

    public void addToDepartments(Employee obj) {
        addToManyTarget("departments", obj, true);
    }

    public void removeFromDepartments(Employee obj) {
        removeToManyTarget("departments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Employee> getDepartments() {
        return (List<Employee>)readProperty("departments");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "depName":
                return this.depName;
            case "departments":
                return this.departments;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "depName":
                this.depName = (String)val;
                break;
            case "departments":
                this.departments = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.depName);
        out.writeObject(this.departments);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.depName = (String)in.readObject();
        this.departments = in.readObject();
    }

}
