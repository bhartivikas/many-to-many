package com.clientaddressmapping.app.entity.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;

import com.clientaddressmapping.app.entity.cayenne.Department;

/**
 * Class _Employee was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Employee extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String EMP_ID_PK_COLUMN = "emp_id";

    public static final StringProperty<String> EMP_NAME = PropertyFactory.createString("empName", String.class);
    public static final EntityProperty<Department> EMPLOYEE = PropertyFactory.createEntity("employee", Department.class);

    protected String empName;

    protected Object employee;

    public void setEmpName(String empName) {
        beforePropertyWrite("empName", this.empName, empName);
        this.empName = empName;
    }

    public String getEmpName() {
        beforePropertyRead("empName");
        return this.empName;
    }

    public void setEmployee(Department employee) {
        setToOneTarget("employee", employee, true);
    }

    public Department getEmployee() {
        return (Department)readProperty("employee");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "empName":
                return this.empName;
            case "employee":
                return this.employee;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "empName":
                this.empName = (String)val;
                break;
            case "employee":
                this.employee = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.empName);
        out.writeObject(this.employee);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.empName = (String)in.readObject();
        this.employee = in.readObject();
    }

}
